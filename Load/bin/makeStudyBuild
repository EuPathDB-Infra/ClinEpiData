#!/usr/bin/env perl

use strict;
use warnings;

use Cwd qw/abs_path/;
use Getopt::Long;
use File::Basename qw/dirname/;


my ($studydir,$name,$owl);

my %options = ( 'd|studyDir=s' => \$studydir, 'n|name=s' => \$name, 'o|owl=s' => \$owl);
unless(@ARGV){ printf("\t%s\n", join("\n\t", keys %options)); exit }
GetOptions(%options);

# /eupath/data/EuPathDB/manualDelivery/ClinEpiDB/Gates/SCORE/five_country/2020-05-27

while(! $name){
  print "link name ? ";
  $name = <>;
  chomp $name;
}

$studydir = abs_path($studydir);
my $dateobdir = join("/", dirname($studydir), "dateObfuscation");
print "mkdir $dateobdir\n";
foreach my $subdir ( ( "$studydir", "$studydir/final", "$studydir/workspace", "$studydir/fromProvider" )){
  unless (-d $subdir ){ mkdir($subdir) or die "Cannot create $subdir: $!\n" }
}


mkdir "$studydir/workspace/build" or die "Cannot make directory $studydir/workspace/build:$!";
symlink "$studydir/workspace/build", $name;
print "$name => $studydir/workspace/build\n";
symlink "$studydir/final", "$name/final";
symlink "$dateobdir/dateObfuscation.txt", "$name/final/dateObfuscation.txt";
symlink "$studydir/workspace", "$name/workspace";
symlink "$studydir/fromProvider", "$name/fromProvider";
mkdir "$studydir/workspace/build/conf";
mkdir "$studydir/workspace/build/data";
mkdir "$studydir/workspace/build/out";


mkdir $dateobdir;
open FH, ">$dateobdir/dateObfuscation.txt" or die "Cannot write to $dateobdir: $!\n";
close FH;
open FH, ">$studydir/workspace/build/conf/dateObfuscation.txt" or die "Cannot create the temp dateObfuscation.txt: $!\n";
close FH;

my $set = {
  com => {
    parent => 'UNDEF',
    anc => 'UNDEF',
    filter => 'repeated:no', 
  },
  comrm => {
    parent => 'com',
    anc => 'community',
    filter => 'repeated:yes', 
  },
  house => {
    parent => 'com',
    anc => 'household',
    filter => 'repeated:no', 
  },
  houserm => {
    parent => 'house',
    anc => 'household',
    filter => 'repeated:yes', 
  },
  part => {
    parent => 'house',
    anc => 'participant',
    filter => 'repeated:no', 
  },
  partrm => {
    parent => 'part',
    anc => 'participant',
    filter => 'repeated:yes', 
  },
  sam => {
    parent => 'obs',
    anc => 'sample',
    filter => 'UNDEF', 
  },
};

foreach my $type (keys %$set){
  mkdir "$studydir/workspace/build/conf/$type";
  my $propfile = <<PPPP;
#### TYPE SPECIFIC SETTINGS ####

category : $type
parentCategory : $set->{$type}->{parent}

outputFile : out/$type.txt
parentMergedFile : out/$set->{$type}->{parent}.txt
colExcludeFile : conf/$type/colexclude.txt

noFilePrefix : 0

## Preprocess using ancillary input 
ancillaryInputFile : conf/$type/anc.txt
applyMappedIRI : 0
applyMappedValues : 0
 
## Parameters for makeExcludeCols
filter : $set->{$type}->{anc}
otherAttrib : $set->{$type}->{filter}

################################
####   GENERAL SETTINGS     ####
ontologyOwlFile : $owl
ontologyMappingXmlFile : conf/ontologyMapping.xml
metadataFile : data
valueMappingFile : conf/valueMap.txt
dateObfuscationFile : conf/dateObfuscation.txt
idMappingFile : conf/idMap.txt

####   INTERNAL SETTINGS    ####
type : Category
parentType : Output
packageName : ClinEpiData::Load::GenericReader
cleanFirst : 1
PPPP
  
  $propfile =~ s/^([\w :]UNDEF(\.txt)?)$//gms;
  open(FH, ">$name/conf/$type/prop.conf") or die "Cannot write $name/conf/$type/prop.conf:$!\n";
  printf FH ($propfile);
  close FH;
}  


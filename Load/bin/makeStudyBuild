#!/usr/bin/env perl

use strict;
use warnings;

use Cwd qw/abs_path/;
use Getopt::Long;
use File::Basename qw/dirname/;
use File::Find;
use Data::Dumper;


my ($studydir,$name,$owl);
my @matches;
sub wanted {
  return if $File::Find::dir =~ /release\/production/;
  if($_ eq $owl . ".owl"){ push(@matches, $File::Find::dir) }
}

my %options = ( 'd|studyDir=s' => \$studydir, 'n|name=s' => \$name, 'o|owl=s' => \$owl);
unless(@ARGV){ printf("\t%s\n", join("\n\t", keys %options)); exit }
GetOptions(%options);
if($owl){
  my @matches;
  find(\&wanted, $ENV{PROJECT_HOME} . "/ApiCommonData/Load/ontology");
}

# /eupath/data/EuPathDB/manualDelivery/ClinEpiDB/Gates/SCORE/five_country/2020-05-27

while(! $name){
  print "link name ? ";
  $name = <>;
  chomp $name;
}

$studydir = abs_path($studydir);
my $dateobdir = join("/", dirname($studydir), "dateObfuscation");
print "mkdir $dateobdir\n";
foreach my $subdir ( ( "$studydir", "$studydir/final", "$studydir/workspace", "$studydir/fromProvider" )){
  unless (-d $subdir ){ mkdir($subdir) or die "Cannot create $subdir: $!\n" }
}


mkdir "$studydir/workspace/build" or die "Cannot make directory $studydir/workspace/build:$!";
symlink "$studydir/workspace/build", $name;
print "$name => $studydir/workspace/build\n";
symlink "$studydir/final", "$name/final";
symlink "$dateobdir/dateObfuscation.txt", "$name/final/dateObfuscation.txt";
symlink "$studydir/workspace", "$name/workspace";
symlink "$studydir/fromProvider", "$name/fromProvider";
mkdir "$studydir/workspace/build/conf";
mkdir "$studydir/workspace/build/data";
mkdir "$studydir/workspace/build/out";

if($owl){
  system("makeOntologyMappingFile.pl -o $owl > $studydir/workspace/build/conf/ontologyMapping.xml");
  if(my $dir =  shift @matches){
    if( -e "$dir/valueMap.txt" ){
      system("ln -s $dir/valueMap.txt $studydir/workspace/build/");
    }
    if( -e "$dir/idMap.txt" ){
      system("ln -s $dir/idMap.txt $studydir/workspace/build/");
    }
  }
}


mkdir $dateobdir;
open FH, ">$dateobdir/dateObfuscation.txt" or die "Cannot write to $dateobdir: $!\n";
close FH;
open FH, ">$studydir/workspace/build/conf/dateObfuscation.txt" or die "Cannot create the temp dateObfuscation.txt: $!\n";
close FH;

my $set = {
  UNDEF => {
    category => 'UNDEF',
    parent => 'UNDEF',
    repeated_of => 'UNDEF',
  },
  com => {
    category => 'community',
    parent => 'UNDEF',
    repeated_of => 'UNDEF',
  },
  crm => {
    category => 'community_repeated_measures',
    parent => 'com',
    repeated_of => 'community',
  },
  house => {
    category => 'household',
    parent => 'com',
    repeated_of => 'UNDEF',
  },
  hrm => {
    category => 'household_repeated_measures',
    parent => 'house',
    repeated_of => 'household',
  },
  part => {
    category => 'participant',
    parent => 'house',
    repeated_of => 'UNDEF',
  },
  prm => {
    category => 'participant_repeated_measures',
    parent => 'part',
    repeated_of => 'participant',
  },
  sam => {
    category => 'sample',
    parent => 'prm',
    repeated_of => 'UNDEF',
  },
};

#open(TASKLIST, "> $studydir/workspace/build/tasks.sh");
foreach my $type (keys %$set){
  next if $type eq 'UNDEF';
  mkdir "$studydir/workspace/build/conf/$type";
  my $excludeParam = 'repeated:no';
  if( $set->{$type}->{repeated_of} ne 'UNDEF'){
    $excludeParam = 'repeated:yes';
  }
  my $propfile = <<PPPP;
#### TYPE SPECIFIC SETTINGS ####

category = $set->{$type}->{category}
parentCategory = $set->{$set->{$type}->{parent}}->{category}

outputFile = out/$type.txt
parentMergedFile = out/$set->{$type}->{parent}.txt
colExcludeFile = conf/$type/colexclude.txt

noFilePrefix = 0

## Preprocess using ancillary input 
ancillaryInputFile = conf/$type/anc.txt
applyMappedIRI = 0
applyMappedValues = 0
 
## Parameters for makeExcludeCols
filter = $set->{$type}->{repeated_of}
otherAttr = $excludeParam

################################
####   GENERAL SETTINGS     ####
ontologyOwlFile = $owl
ontologyMappingXmlFile = conf/ontologyMapping.xml
metadataFile = data
valueMappingFile = conf/valueMap.txt
dateObfuscationFile = conf/dateObfuscation.txt
idMappingFile = conf/idMap.txt

####   INTERNAL SETTINGS    ####
type = Category
parentType = Output
packageName = ClinEpiData::Load::GenericReader
cleanFirst = 1
PPPP
  
  #$propfile =~ s/^([\w :=]UNDEF(\.txt)?)$//gms;
  open(FH, ">$name/conf/$type/prop.conf") or die "Cannot write $name/conf/$type/prop.conf:$!\n";
  foreach my $line ( split(/\n/, $propfile ) {
    if($line =~ /UNDEF/){ $line = "# $line" }
    printf FH ("$line\n");
  }
  close FH;
  # try to make exclude cols
  my @args = ("-p $name/conf/$type/prop.conf");
  if($set->{$type}->{repeated_of} ne 'UNDEF'){push(@args, "-f $set->{$type}->{repeated_of}", "-a repeated:yes")}
  else{push(@args, "-a repeated:no")}
# printf TASKLIST ("makeExcludeCols.pl %s > $name/conf/$type/colexclude.txt\n", join(" ", @args));
}  
# close(TASKLIST);

#end
#
;

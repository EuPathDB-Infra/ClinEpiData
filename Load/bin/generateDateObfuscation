#!/usr/bin/env perl
use strict;
use warnings;

# use lib "$ENV{GUS_HOME}/lib/perl";

use File::Basename;
use Data::Dumper;
use Getopt::Long;

my ($type, $file, $primary, $parent, $deltaFile, $delim, $append);

unless(@ARGV){
  printf("args:\n\t%s\n",join("\n\t",
  't|type=s' ,
  'f|file=s' ,
  'k|primary=s' ,
  'p|parent=s' ,
  'd|dateObfuscationFile=s' ,
  'c|delimiter=s' ,
  'a|append!',
  ));
  exit;
}

GetOptions(
  't|type=s' => \$type,
  'f|file=s' => \$file,
  'k|primary=s' => \$primary,
  'p|parent=s' => \$parent,
  'd|dateObfuscationFile=s' => \$deltaFile,
  'c|delimiter=s' => \$delim,
  'a|append!' => \$append
);

$delim ||= "\t";
$primary ||= 'PRIMARY_KEY';
$parent ||= 'PARENT';

my %type2iri = (
com => 'EUPATH_0035127',
crm => 'EUPATH_0043226',
house => 'PCO_0000024',
hrm => 'EUPATH_0000776',
ento => 'EUPATH_0000327',
part => 'EUPATH_0000096',
prm => 'EUPATH_0000738',
sam => 'EUPATH_0000609'
);

die("$type not recognized, must be one of: " . join(", ", keys %type2iri) . "\n") unless $type2iri{$type};

my %deltas;

if(defined($deltaFile) && -e $deltaFile){
  open(FH, "<$deltaFile") or die "$deltaFile: $!";
  while(my $row = <FH>){
    chomp $row;
    my($iri,$id,$delta) = split(/\t/, $row);
    $deltas{$id} = $delta;
  }
  close(FH);
}
printf STDERR ("Done reading $deltaFile\n");

#printf STDERR ("Getting $parent from $file\n");
#my $pids = getColumnFromFile($file,$parent);
#printf STDERR ("Getting $primary from $file\n");
#my $ids = getColumnFromFile($file,$primary);
#my %parentOf;
#@parentOf{@$ids} = @$pids; 
#printf STDERR ("Mapped %d %s to %d %s\n", scalar @$ids, $primary, @$pids, $parent);

my %parentOf = %{ getIdMap($file) };

my $count = 0;
my $outfh = \*STDOUT;
if($append){
  printf STDERR ("Appending $deltaFile\n");
  open($outfh, ">>$deltaFile");
}
foreach my $id (keys %parentOf){
#foreach my $id (@$ids){
  # unless($id){ die sprintf("Invisible id preceded by %s, followed by %s\n", $ids->[$count-1], $ids->[$count+1]) }
  $count++;
  my $pid = $parentOf{$id};
  if(defined($pid) && defined($deltas{$pid}) ){
    $deltas{$id} = $deltas{$pid};
  }
  elsif(defined($deltas{$id}) && defined($deltas{$pid})){
    die "$id and $pid have different deltas\n" unless($deltas{$id} eq $deltas{$pid});
  }
  else {
    $deltas{$id} ||= calculateDelta();
  }
  printf $outfh ("%s\n", join($delim, $type2iri{$type}, $id, $deltas{$id}));
}

sub getIdMap {
  my ($mdfile) = @_;
  my %map;
  open(FH, "<$mdfile") or die "$mdfile: $!\n";
  my $row = <FH>;
  while($row = <FH>){
    chomp $row;
    my ($a, $b) = split(/\t/, $row);
    $map{$a} = $b;
  }
  close(FH);
  return \%map;
}

sub getColumnFromFile {
  my ($mdfile,$col) = @_;
  my @values;
  open(FH, "<$mdfile") or die "$mdfile: $!\n";
  my $row = <FH>;
  chomp $row;
  my @cols = split(/$delim/, $row);
  while($row = <FH>){
    chomp $row;
    my @vals = split(/$delim/, $row);
    my %h;
    @h{@cols} = @vals;
    push(@values, $h{$col});
  }
  close(FH);
  return \@values;
}



sub calculateDelta {
## copied from CBIL::ISA::Functions
  my $plusOrMinusDays = 7; # TODO: parameterize this
  my $direction = int (rand(2)) ? 1 : -1;
  my $magnitude = 1 + int(rand($plusOrMinusDays));
  my $days = $direction * $magnitude; 
  my $deltaString = "0:0:0:$days:0:0:0";
  return $deltaString;
}
